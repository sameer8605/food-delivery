{"ast":null,"code":"var _jsxFileName = \"D:\\\\sameer\\\\udemy\\\\react2021\\\\food-delivery\\\\src\\\\Store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './CartContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initailState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst reducer = (state, action) => {\n  if (action.type = \"Add\") {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingItemIndex = state.items.findIndex(item => item.id === action.item.id); // it will find index is same.\n\n    const existingCartItem = state.items[existingItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    if (action.type = \"REMOVE\") {\n      const existingItemIndex = state.items.findIndex(item => item.id === action.id); // it will find index is same.\n\n      const existingItem = state.items[existingItemIndex];\n      const updatedTotalAmount = state.totalAmount - existingItem.price;\n      let updatedItems;\n\n      if (existingItem.amount === 1) {\n        updatedItems = state.item.filter(item => item.id != action.id);\n      } else {\n        const updatedItem = { ...existingItem,\n          amount: existingItem.amount - 1\n        };\n        updatedItems = [...state.item];\n        updatedItems[existingItemIndex] = updatedItem;\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    }\n  }\n\n  return initailState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatch] = useReducer(reducer, initailState);\n\n  const addItemToCartHandler = item => {\n    console.log(item);\n    dispatch({\n      type: \"Add\",\n      item: item\n    }); // we updated initaiState\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatch({\n      type: 'REMOVE',\n      id: id\n    }); /// we updated initialState\n  };\n\n  const CartContextdat = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: CartContextdat,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 1\n  }, this);\n};\n\n_s(CartProvider, \"OnTniQ/VA1J5hTfT3VUltHsGHzM=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/sameer/udemy/react2021/food-delivery/src/Store/CartProvider.js"],"names":["useReducer","CartContext","initailState","items","totalAmount","reducer","state","action","type","updatedTotalAmount","item","price","amount","existingItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","CartProvider","props","cartState","dispatch","addItemToCartHandler","console","log","removeItemFromCartHandler","CartContextdat","addItem","children"],"mappings":"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","sourcesContent":["\r\nimport { useReducer } from 'react';\r\nimport CartContext from './CartContext';\r\nconst initailState = {\r\n    items : [],\r\n    totalAmount:0\r\n}\r\nconst reducer = (state,action)=>{\r\nif (action.type = \"Add\"){\r\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n    const existingItemIndex = state.items.findIndex((item)=>item.id===action.item.id); // it will find index is same.\r\n    const existingCartItem = state.items[existingItemIndex];\r\n    \r\n    let updatedItems;\r\n    if(existingCartItem){\r\n    const updatedItem ={\r\n            ...existingCartItem,\r\n            amount:existingCartItem.amount + action.item.amount\r\n        };\r\n        updatedItems = [...state.items]\r\n        updatedItems[existingItemIndex] = updatedItem;\r\n    } else{\r\n        \r\n        updatedItems = state.items.concat(action.item);\r\n    }\r\n    if(action.type = \"REMOVE\"){\r\n        const existingItemIndex = state.items.findIndex((item)=>item.id===action.id); // it will find index is same.\r\n        const existingItem = state.items[existingItemIndex];\r\n        const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n        let updatedItems;\r\n        if(existingItem.amount ===1){\r\n            updatedItems = state.item.filter(item => item.id !=action.id);\r\n        }else{\r\n            const updatedItem ={...existingItem,amount:existingItem.amount - 1}\r\n            updatedItems = [...state.item];\r\n            updatedItems[existingItemIndex] = updatedItem;\r\n        }\r\n    return{\r\n    items : updatedItems,\r\n    totalAmount : updatedTotalAmount\r\n    }\r\n}\r\n\r\n    \r\n}\r\nreturn initailState\r\n}\r\nconst CartProvider = (props)=>{\r\n    const[cartState,dispatch] = useReducer(reducer,initailState)\r\n    const addItemToCartHandler = (item)=>{\r\n        console.log( item)\r\n        dispatch({type:\"Add\",item:item})  // we updated initaiState\r\n        \r\n    }\r\n    const removeItemFromCartHandler = (id)=>{\r\n        dispatch({type:'REMOVE',id:id}); /// we updated initialState\r\n    }\r\n     \r\n    const CartContextdat = {\r\n        items: cartState.items,\r\n        totalAmount: cartState.totalAmount,\r\n        addItem: addItemToCartHandler,\r\n        removeItemFromCartHandler\r\n    };\r\nreturn(\r\n<CartContext.Provider value={CartContextdat}>\r\n    {props.children}\r\n    </CartContext.Provider>\r\n)\r\n}\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}